'use client';

import { useEffect, useState } from 'react';
import { getAllYeuCau, timKiemYeuCau, duyetYeuCau, tuChoiYeuCau } from '@/services/yeucau.service';

interface YeuCau {
    _id: string;
    ma_BN: {
        ho_ten: string;
        ngay_sinh: string;
        gioi_tinh: string;
        dien_thoai: string;
        email: string;
        dia_chi: string;
    };
    ngay_muon_kham: string;
    chuyen_khoa: string;
    trieu_chung: string;
    trang_thai_YC: 'cho_duyet' | 'da_duyet' | 'tu_choi';
}

export default function YeuCauPage() {
    const [dsYeuCau, setDsYeuCau] = useState<YeuCau[]>([]);
    const [loading, setLoading] = useState(true);
    const [timKiem, setTimKiem] = useState('');
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        fetchYeuCau();
    }, []);

    const fetchYeuCau = async () => {
        try {
            setLoading(true);
            const data = await getAllYeuCau();
            setDsYeuCau(data);
        } catch (err) {
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu');
        } finally {
            setLoading(false);
        }
    };

    const handleSearch = async () => {
        if (!timKiem.trim()) return fetchYeuCau();
        try {
            setLoading(true);
            const data = await timKiemYeuCau(timKiem.trim());
            setDsYeuCau(data);
        } catch (err) {
            setError('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu');
        } finally {
            setLoading(false);
        }
    };

    const handleDuyet = async (id: string) => {
        try {
          console.log("üîç Duy·ªát y√™u c·∫ßu ID:", id);
          const res = await duyetYeuCau(id);
          console.log("‚úÖ Duy·ªát th√†nh c√¥ng:", res);
          fetchYeuCau();
        } catch (err) {
          console.error("‚ùå L·ªói khi duy·ªát:", err);
          setError('L·ªói khi duy·ªát y√™u c·∫ßu');
        }
      };
      
    const handleTuChoi = async (id: string) => {
        try {
            await tuChoiYeuCau(id);
            fetchYeuCau(); // Refresh danh s√°ch
        } catch (err) {
            setError('L·ªói khi t·ª´ ch·ªëi y√™u c·∫ßu');
        }
    };
    return (
        <div className="p-4">
            <h1 className="text-2xl font-bold mb-4">Danh s√°ch y√™u c·∫ßu kh√°m</h1>

            <div className="mb-4 flex gap-2">
                <input
                    type="text"
                    placeholder="T√¨m ki·∫øm theo t√™n b·ªánh nh√¢n"
                    value={timKiem}
                    onChange={(e) => setTimKiem(e.target.value)}
                    className="border px-3 py-2 rounded w-80"
                />
                <button
                    onClick={handleSearch}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                >
                    T√¨m ki·∫øm
                </button>
            </div>

            {loading ? (
                <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
            ) : error ? (
                <p className="text-red-500">{error}</p>
            ) : (
                <table className="w-full border border-gray-300 text-sm">
                    <thead className="bg-gray-100">
                        <tr>
                            <th className="border p-2">H·ªç t√™n</th>
                            <th className="border p-2">Chuy√™n khoa</th>
                            <th className="border p-2">Tri·ªáu ch·ª©ng</th>
                            <th className="border p-2">Ng√†y mu·ªën kh√°m</th>
                            <th className="border p-2">Tr·∫°ng th√°i</th>
                        </tr>
                    </thead>
                    <tbody>
                        {dsYeuCau.map((yc) => (
                            <tr key={yc._id}>
                                <td className="border p-2">{yc.ma_BN?.ho_ten}</td>
                                <td className="border p-2">{yc.chuyen_khoa}</td>
                                <td className="border p-2">{yc.trieu_chung}</td>
                                <td className="border p-2">
                                    {new Date(yc.ngay_muon_kham).toLocaleDateString()}
                                </td>
                                <td className="border p-2">
                                    {yc.trang_thai_YC === 'cho_duyet' ? (
                                        <div className="flex gap-2">
                                            <button
                                                onClick={() => handleDuyet(yc._id)}
                                                className="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600 text-xs"
                                            >
                                                Duy·ªát
                                            </button>
                                            <button
                                                onClick={() => handleTuChoi(yc._id)}
                                                className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 text-xs"
                                            >
                                                T·ª´ ch·ªëi
                                            </button>
                                        </div>
                                    ) : yc.trang_thai_YC === 'da_duyet' ? (
                                        <span className="text-green-700 font-semibold">ƒê√£ duy·ªát</span>
                                    ) : (
                                        <span className="text-red-700 font-semibold">T·ª´ ch·ªëi</span>
                                    )}
                                </td>

                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    );
}
